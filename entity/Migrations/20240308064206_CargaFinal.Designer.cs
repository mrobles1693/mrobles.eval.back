// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using entity;

#nullable disable

namespace entity.Migrations
{
    [DbContext(typeof(BackContext))]
    [Migration("20240308064206_CargaFinal")]
    partial class CargaFinal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("entity.ClienteEntity", b =>
                {
                    b.Property<int>("nIdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("nIdCliente"));

                    b.Property<DateTime>("dFechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("nIdGenero")
                        .HasColumnType("int");

                    b.Property<int>("nIdTipoDocumento")
                        .HasColumnType("int");

                    b.Property<string>("sApellidoM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sApellidoP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sDocumento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("nIdCliente");

                    b.HasIndex("nIdGenero");

                    b.HasIndex("nIdTipoDocumento");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("entity.GeneroEntity", b =>
                {
                    b.Property<int>("nIdGenero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("nIdGenero"));

                    b.Property<string>("sGenero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("nIdGenero");

                    b.ToTable("Genero");

                    b.HasData(
                        new
                        {
                            nIdGenero = 1,
                            sGenero = "Masculino"
                        },
                        new
                        {
                            nIdGenero = 2,
                            sGenero = "Femenino"
                        });
                });

            modelBuilder.Entity("entity.GeneroPeliculaEntity", b =>
                {
                    b.Property<int>("nIdGenero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("nIdGenero"));

                    b.Property<string>("sGenero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("nIdGenero");

                    b.ToTable("GeneroPelicula");

                    b.HasData(
                        new
                        {
                            nIdGenero = 1,
                            sGenero = "Acción"
                        },
                        new
                        {
                            nIdGenero = 2,
                            sGenero = "Terror"
                        },
                        new
                        {
                            nIdGenero = 3,
                            sGenero = "Comedia"
                        });
                });

            modelBuilder.Entity("entity.PeliculaEntity", b =>
                {
                    b.Property<int>("nIdPelicula")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("nIdPelicula"));

                    b.Property<byte[]>("bPortada")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("nIdGenero")
                        .HasColumnType("int");

                    b.Property<string>("sSinopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sTitulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("tDuracion")
                        .HasColumnType("time");

                    b.HasKey("nIdPelicula");

                    b.HasIndex("nIdGenero");

                    b.ToTable("Pelicula");

                    b.HasData(
                        new
                        {
                            nIdPelicula = 1,
                            nIdGenero = 1,
                            sSinopsis = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            sTitulo = "Terminator",
                            tDuracion = new TimeSpan(0, 1, 30, 0, 0)
                        },
                        new
                        {
                            nIdPelicula = 2,
                            nIdGenero = 1,
                            sSinopsis = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            sTitulo = "Duro de Matar",
                            tDuracion = new TimeSpan(0, 1, 45, 0, 0)
                        },
                        new
                        {
                            nIdPelicula = 3,
                            nIdGenero = 2,
                            sSinopsis = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            sTitulo = "Saw I",
                            tDuracion = new TimeSpan(0, 2, 0, 0, 0)
                        },
                        new
                        {
                            nIdPelicula = 4,
                            nIdGenero = 2,
                            sSinopsis = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            sTitulo = "La Monja",
                            tDuracion = new TimeSpan(0, 1, 40, 0, 0)
                        },
                        new
                        {
                            nIdPelicula = 5,
                            nIdGenero = 3,
                            sSinopsis = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            sTitulo = "Donde están las tubias",
                            tDuracion = new TimeSpan(0, 1, 45, 0, 0)
                        },
                        new
                        {
                            nIdPelicula = 6,
                            nIdGenero = 3,
                            sSinopsis = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            sTitulo = "El todo poderoso",
                            tDuracion = new TimeSpan(0, 1, 35, 0, 0)
                        });
                });

            modelBuilder.Entity("entity.ReservaEntity", b =>
                {
                    b.Property<int>("nIdReserva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("nIdReserva"));

                    b.Property<int>("nCantidad")
                        .HasColumnType("int");

                    b.Property<int>("nIdCliente")
                        .HasColumnType("int");

                    b.Property<int>("nIdSalaPelicula")
                        .HasColumnType("int");

                    b.HasKey("nIdReserva");

                    b.HasIndex("nIdCliente");

                    b.HasIndex("nIdSalaPelicula");

                    b.ToTable("Reserva");
                });

            modelBuilder.Entity("entity.SalaEntity", b =>
                {
                    b.Property<int>("nIdSala")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("nIdSala"));

                    b.Property<int>("nCapacidad")
                        .HasColumnType("int");

                    b.Property<string>("sSala")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("nIdSala");

                    b.ToTable("Sala");

                    b.HasData(
                        new
                        {
                            nIdSala = 1,
                            nCapacidad = 100,
                            sSala = "A"
                        },
                        new
                        {
                            nIdSala = 2,
                            nCapacidad = 100,
                            sSala = "B"
                        },
                        new
                        {
                            nIdSala = 3,
                            nCapacidad = 100,
                            sSala = "C"
                        },
                        new
                        {
                            nIdSala = 4,
                            nCapacidad = 100,
                            sSala = "D"
                        });
                });

            modelBuilder.Entity("entity.SalaPeliculaEntity", b =>
                {
                    b.Property<int>("nIdSalaPelicula")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("nIdSalaPelicula"));

                    b.Property<DateTime>("dFechaProgramada")
                        .HasColumnType("datetime2");

                    b.Property<int>("nIdPelicula")
                        .HasColumnType("int");

                    b.Property<int>("nIdSala")
                        .HasColumnType("int");

                    b.HasKey("nIdSalaPelicula");

                    b.HasIndex("nIdPelicula");

                    b.HasIndex("nIdSala");

                    b.ToTable("SalaPelicula");

                    b.HasData(
                        new
                        {
                            nIdSalaPelicula = 1,
                            dFechaProgramada = new DateTime(2024, 3, 8, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 1,
                            nIdSala = 1
                        },
                        new
                        {
                            nIdSalaPelicula = 2,
                            dFechaProgramada = new DateTime(2024, 3, 8, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 2,
                            nIdSala = 2
                        },
                        new
                        {
                            nIdSalaPelicula = 3,
                            dFechaProgramada = new DateTime(2024, 3, 8, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 3,
                            nIdSala = 1
                        },
                        new
                        {
                            nIdSalaPelicula = 4,
                            dFechaProgramada = new DateTime(2024, 3, 8, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 4,
                            nIdSala = 2
                        },
                        new
                        {
                            nIdSalaPelicula = 5,
                            dFechaProgramada = new DateTime(2024, 3, 8, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 5,
                            nIdSala = 1
                        },
                        new
                        {
                            nIdSalaPelicula = 6,
                            dFechaProgramada = new DateTime(2024, 3, 8, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 6,
                            nIdSala = 2
                        },
                        new
                        {
                            nIdSalaPelicula = 7,
                            dFechaProgramada = new DateTime(2024, 3, 9, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 1,
                            nIdSala = 1
                        },
                        new
                        {
                            nIdSalaPelicula = 8,
                            dFechaProgramada = new DateTime(2024, 3, 9, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 2,
                            nIdSala = 2
                        },
                        new
                        {
                            nIdSalaPelicula = 9,
                            dFechaProgramada = new DateTime(2024, 3, 9, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 3,
                            nIdSala = 1
                        },
                        new
                        {
                            nIdSalaPelicula = 10,
                            dFechaProgramada = new DateTime(2024, 3, 9, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 4,
                            nIdSala = 2
                        },
                        new
                        {
                            nIdSalaPelicula = 11,
                            dFechaProgramada = new DateTime(2024, 3, 9, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 5,
                            nIdSala = 1
                        },
                        new
                        {
                            nIdSalaPelicula = 12,
                            dFechaProgramada = new DateTime(2024, 3, 9, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 6,
                            nIdSala = 2
                        },
                        new
                        {
                            nIdSalaPelicula = 13,
                            dFechaProgramada = new DateTime(2024, 3, 10, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 1,
                            nIdSala = 1
                        },
                        new
                        {
                            nIdSalaPelicula = 14,
                            dFechaProgramada = new DateTime(2024, 3, 10, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 2,
                            nIdSala = 2
                        },
                        new
                        {
                            nIdSalaPelicula = 15,
                            dFechaProgramada = new DateTime(2024, 3, 10, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 3,
                            nIdSala = 1
                        },
                        new
                        {
                            nIdSalaPelicula = 16,
                            dFechaProgramada = new DateTime(2024, 3, 10, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 4,
                            nIdSala = 2
                        },
                        new
                        {
                            nIdSalaPelicula = 17,
                            dFechaProgramada = new DateTime(2024, 3, 10, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 5,
                            nIdSala = 1
                        },
                        new
                        {
                            nIdSalaPelicula = 18,
                            dFechaProgramada = new DateTime(2024, 3, 10, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 6,
                            nIdSala = 2
                        },
                        new
                        {
                            nIdSalaPelicula = 19,
                            dFechaProgramada = new DateTime(2024, 3, 11, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 1,
                            nIdSala = 1
                        },
                        new
                        {
                            nIdSalaPelicula = 20,
                            dFechaProgramada = new DateTime(2024, 3, 11, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 2,
                            nIdSala = 2
                        },
                        new
                        {
                            nIdSalaPelicula = 21,
                            dFechaProgramada = new DateTime(2024, 3, 11, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 3,
                            nIdSala = 1
                        },
                        new
                        {
                            nIdSalaPelicula = 22,
                            dFechaProgramada = new DateTime(2024, 3, 11, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 4,
                            nIdSala = 2
                        },
                        new
                        {
                            nIdSalaPelicula = 23,
                            dFechaProgramada = new DateTime(2024, 3, 11, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 5,
                            nIdSala = 1
                        },
                        new
                        {
                            nIdSalaPelicula = 24,
                            dFechaProgramada = new DateTime(2024, 3, 11, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            nIdPelicula = 6,
                            nIdSala = 2
                        });
                });

            modelBuilder.Entity("entity.TipoDocumentoEntity", b =>
                {
                    b.Property<int>("nIdTipoDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("nIdTipoDocumento"));

                    b.Property<string>("sTipoDocumento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("nIdTipoDocumento");

                    b.ToTable("TipoDocumento");

                    b.HasData(
                        new
                        {
                            nIdTipoDocumento = 1,
                            sTipoDocumento = "DNI"
                        },
                        new
                        {
                            nIdTipoDocumento = 2,
                            sTipoDocumento = "CE"
                        },
                        new
                        {
                            nIdTipoDocumento = 3,
                            sTipoDocumento = "RUC"
                        });
                });

            modelBuilder.Entity("entity.ClienteEntity", b =>
                {
                    b.HasOne("entity.GeneroEntity", "genero")
                        .WithMany()
                        .HasForeignKey("nIdGenero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("entity.TipoDocumentoEntity", "tipoDocumento")
                        .WithMany()
                        .HasForeignKey("nIdTipoDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("genero");

                    b.Navigation("tipoDocumento");
                });

            modelBuilder.Entity("entity.PeliculaEntity", b =>
                {
                    b.HasOne("entity.GeneroPeliculaEntity", "generoPelicula")
                        .WithMany()
                        .HasForeignKey("nIdGenero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("generoPelicula");
                });

            modelBuilder.Entity("entity.ReservaEntity", b =>
                {
                    b.HasOne("entity.ClienteEntity", "cliente")
                        .WithMany()
                        .HasForeignKey("nIdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("entity.SalaPeliculaEntity", "salaPelicula")
                        .WithMany()
                        .HasForeignKey("nIdSalaPelicula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cliente");

                    b.Navigation("salaPelicula");
                });

            modelBuilder.Entity("entity.SalaPeliculaEntity", b =>
                {
                    b.HasOne("entity.PeliculaEntity", "pelicula")
                        .WithMany()
                        .HasForeignKey("nIdPelicula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("entity.SalaEntity", "sala")
                        .WithMany()
                        .HasForeignKey("nIdSala")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pelicula");

                    b.Navigation("sala");
                });
#pragma warning restore 612, 618
        }
    }
}
